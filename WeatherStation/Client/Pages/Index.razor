@page "/"
@inject HttpClient http
@using Microsoft.Extensions.Configuration
@using System.Threading
@using WeatherStation.Client.ViewModel
@using WeatherStation.Shared
@inject IConfiguration Configuration

@if (currentWeather == null)
{
    <div class="loader"></div>
}
else
{
    <div class="center">
        <RadzenCard Style="margin:10px;">
            <RadzenRadialGauge Style="width: 300px; height: 300px;">
                <RadzenRadialGaugeScale StartAngle="-150" EndAngle="150" Step="5" Min="0" Max="40" TickPosition="GaugeTickPosition.Inside">
                    <RadzenRadialGaugeScalePointer Value=@currentWeather.Temperature Length="0.6" ShowValue=@false />
                    <RadzenRadialGaugeScaleRange From="0" To="20" Fill="blue" />
                    <RadzenRadialGaugeScaleRange From="20" To="30" Fill="orange" />
                    <RadzenRadialGaugeScaleRange From="30" To="40" Fill="red" />
                </RadzenRadialGaugeScale>
            </RadzenRadialGauge>
            <RadzenText Style="text-align: center;" TextStyle="TextStyle.Body1"><b>Temperature: @currentWeather.Temperature °C</b></RadzenText>
        </RadzenCard>
        <RadzenCard Style="margin:10px;">
            <RadzenRadialGauge Style="width: 300px; height: 300px;">
                <RadzenRadialGaugeScale StartAngle="-150" EndAngle="150" Step="10" Min="950" Max="1050" TickPosition="GaugeTickPosition.Inside">
                    <RadzenRadialGaugeScalePointer Value=@currentWeather.Pressure Length="0.6" ShowValue=@false />
                    <RadzenRadialGaugeScaleRange From="950" To="1000" Fill="blue" />
                    <RadzenRadialGaugeScaleRange From="1000" To="1020" Fill="orange" />
                    <RadzenRadialGaugeScaleRange From="1020" To="1050" Fill="red" />
                </RadzenRadialGaugeScale>
            </RadzenRadialGauge>
            <RadzenText Style="text-align: center;" TextStyle="TextStyle.Body1"><b>Pressure: @currentWeather.Pressure hPa</b></RadzenText>
        </RadzenCard>
    </div>
}
@code
{

    WeatherVM? currentWeather;
    private System.Threading.Timer? timer;

    protected override async Task OnInitializedAsync()
    {
        timer = new Timer(async (object? stateInfo) =>
        {
            currentWeather = await GetWeather();
            StateHasChanged();
        }, new System.Threading.AutoResetEvent(false), Convert.ToInt32(Configuration["TimerPeriodInMiliSeconds"]), Convert.ToInt32(Configuration["TimerPeriodInMiliSeconds"]));
    }

    async Task<WeatherVM> GetWeather()
    {
        return WeatherVM.Create(await http.GetFromJsonAsync<Weather>($"{Configuration["WeatherApiAddress"]}api/Weather/Current"));
    }

}
<style>
    .center {
        position: fixed;
        display: flex;
        flex-direction: row;
        justify-content: center;
        align-items: center;
        top: 50%;
        left: 50%;
        -webkit-transform: translate(-50%, -50%);
        transform: translate(-50%, -50%);
    }

</style>